CREATE DATABASE CASE_STUDY_1



SELECT * FROM FACT

SELECT * FROM LOCATION

SELECT * FROM PRODUCT



--1. Display the number of states present in the LocationTable.


--BULTI-IN -> MAX MIN ,SUM ,AVG , COUNT


SELECT COUNT(DISTINCT STATE)AS STATE FROM LOCATION



--2. How many products are of regular type?


SELECT COUNT(PRODUCT) AS PRODUCT FROM PRODUCT WHERE TYPE='REGULAR'



--3. How much spending has been done on marketing of product ID 1?


SELECT SUM(MARKETING) AS MARKETING FROM FACT WHERE ProductId=1



--4. What is the minimum sales of a product?


SELECT MIN(SALES) AS MIN_SALES FROM FACT



--5. Display the max Cost of Good Sold (COGS)


SELECT MAX(COGS) AS MAX_COGS FROM FACT

--6. Display the details of the product where product type is coffee.



SELECT PRODUCTID FROM PRODUCT WHERE Product_Type='COFFEE'



--7. Display the details where total expenses are greater than 40.


SELECT * FROM  FACT WHERE TOTAL_EXPENSES>40



--8. What is the average sales in area code 719?


SELECT AVG(SALES) AS AVG_SALES FROM FACT WHERE AREA_CODE=719



--9. Find out the total profit generated by Colorado state.


SELECT SUM(PROFIT) AS TOTAL_PROFIT FROM FACT INNER JOIN LOCATION ON
FACT.Area_Code=LOCATION.Area_Code  WHERE STATE='COLORADO'



--10. Display the average inventory for each product ID

--EACH , WISE , ALL , SPECIFIC , PARTICULAR , DIFFERENT

SELECT PRODUCTID , AVG(INVENTORY) AS AVG_INV FROM FACT GROUP BY PRODUCTID ORDER BY PRODUCTID

--11. Display state in a sequential order in a Location Table.



SELECT * FROM LOCATION ORDER BY STATE ASC

SELECT DISTINCT STATE FROM LOCATION ORDER BY STATE ASC



--12. Display the average budget of the Product where the average budget margin should be greater than 100.


SELECT PRODUCTID ,AVG(Budget_Margin) AS AVG_BUDGET FROM FACT GROUP BY PRODUCTID
HAVING AVG(BUDGET_MARGIN)>100 ORDER BY PRODUCTID


--13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES FROM FACT WHERE DATE='2010-01-01'


--14. Display the average total expense of each product ID on an individual date.


SELECT DATE , PRODUCTID ,AVG(TOTAL_EXPENSES) AS AVG_EXP FROM FACT GROUP BY PRODUCTID , DATE ORDER BY PRODUCTID



--15. Display the table with the following attributes  such as date, productID, product_type, product, sales, profit, state, area_code. 


SELECT date, FACT.productID, product_type, product, sales, profit, state, FACT.area_code FROM FACT INNER JOIN LOCATION
ON FACT.Area_Code=LOCATION.Area_Code INNER JOIN PRODUCT ON FACT.PRODUCTID=Product.PRODUCTID


--16. Display the rank without any gap to show the sales wise rank. 


SELECT SALES ,RANK()  OVER (ORDER BY SALES DESC) AS SALES_RANK FROM FACT

SELECT SALES ,DENSE_RANK()  OVER (ORDER BY SALES DESC) AS SALES_RANK FROM FACT


--17. Find the state wise profit and sales.

SELECT STATE , SUM(SALES) AS SALES ,SUM(PROFIT) AS PROFIT FROM FACT INNER JOIN LOCATION
ON FACT.Area_Code=LOCATION.Area_Code GROUP BY STATE


--18. Find the state wise profit and sales along with the productname. 

SELECT STATE , PRODUCT ,SUM(SALES) AS SALES , SUM(PROFIT) AS PROFIT FROM FACT INNER JOIN LOCATION
ON FACT.Area_Code=LOCATION.Area_Code INNER JOIN PRODUCT ON FACT.PRODUCTID=PRODUCT.PRODUCTID GROUP BY STATE , PRODUCT



--19. If there is an increase in sales of 5%, calculate the increased sales.


--INCREASED SALES 5% = 100+5 = 105 /100= 1.05


SELECT SALES , (SALES*1.05) AS INCREASED_SALES FROM FACT


--20. Find the maximum profit along with the product ID and product type.


SELECT FACT.PRODUCTID , PRODUCT_TYPE , PROFIT FROM FACT INNER JOIN PRODUCT ON FACT.PRODUCTID=PRODUCT.PRODUCTID
WHERE PROFIT=(SELECT MAX(PROFIT) FROM FACT)


--21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 


CREATE PROCEDURE PTYPE @PROD_TYP VARCHAR(20) 
AS
SELECT * FROM PRODUCT
WHERE PRODUCT_TYPE=@PROD_TYP

EXEC PTYPE @PROD_TYP='COFFEE'


--22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.


SELECT TOTAL_EXPENSES, IIF(TOTAL_EXPENSES<60 ,'PROFIT','LOSS') AS STATUS FROM FACT


--23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.


SELECT DATEPART(WEEK,DATE)AS WEEKNUM 
, PRODUCTID ,SUM(SALES) AS SALES FROM FACT GROUP BY PRODUCTID , DATEPART(WEEK,DATE) WITH ROLLUP


--24. Apply union and intersection operator on the tables which consist of attribute area code.


SELECT  AREA_CODE FROM LOCATION 
UNION
SELECT AREA_CODE FROM FACT



SELECT  AREA_CODE FROM LOCATION 
INTERSECT
SELECT AREA_CODE FROM FACT


--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference

CREATE FUNCTION PRODUCTTABLE (@PRODUCT_TYPE VARCHAR(30))
RETURNS
TABLE AS
RETURN SELECT * FROM PRODUCT WHERE @PRODUCT_TYPE=@PRODUCT_TYPE


SELECT * FROM DBO.PRODUCTTABLE('COFFEE')


--26. Change the product type from coffee to tea where product IDis 1 and undo it.


BEGIN TRANSACTION
UPDATE PRODUCT SET Product_Type='TEA' WHERE ProductId=1


SELECT * FROM PRODUCT


ROLLBACK TRANSACTION



--27. Display the date, product ID and sales where total expenses are between 100 to 200. 


SELECT DATE , PRODUCTID ,SALES ,TOTAL_EXPENSES FROM FACT WHERE Total_Expenses BETWEEN 100 AND 200


--28. Delete the records in the Product Table for regular type.


DELETE FROM PRODUCT WHERE TYPE='REGULAR'

SELECT * FROM PRODUCT

--29. Display the ASCII value of the fifth character from the column Product.

SELECT ASCII('a')

select * from product


select product,(ascii(substring(product,5,1))) as ascii_vales from product